import logging
from io import BytesIO

import pandas as pd
from aiogram import F, Router
from aiogram.types import BufferedInputFile, CallbackQuery
from numpy.random.mtrand import Sequence

from infrastructure.database.repo.requests import RequestsRepo
from tgbot.filters.admin import AdminFilter
from tgbot.keyboards.admin.main import AdminMenu
from tgbot.keyboards.admin.stats_extract import (
    DivisionStatsExtract,
    MonthStatsExtract,
    division_selection_kb,
    extract_kb,
)
from tgbot.services.logger import setup_logging

stats_router = Router()
stats_router.message.filter(AdminFilter())
stats_router.callback_query.filter(AdminFilter())

setup_logging()
logger = logging.getLogger(__name__)


@stats_router.callback_query(AdminMenu.filter(F.menu == "stats_extract"))
async def extract_stats(callback: CallbackQuery) -> None:
    await callback.message.edit_text(
        """<b>üì• –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π

<i>–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –≤—ã–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ–Ω—é</i>""",
        reply_markup=extract_kb(),
    )
    await callback.answer()


@stats_router.callback_query(MonthStatsExtract.filter(F.menu == "month"))
async def admin_extract_month_select_division(
    callback: CallbackQuery,
    callback_data: MonthStatsExtract,
) -> None:
    """
    –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    month = callback_data.month
    year = callback_data.year

    # –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    month_names = {
        1: "—è–Ω–≤–∞—Ä—å",
        2: "—Ñ–µ–≤—Ä–∞–ª—å",
        3: "–º–∞—Ä—Ç",
        4: "–∞–ø—Ä–µ–ª—å",
        5: "–º–∞–π",
        6: "–∏—é–Ω—å",
        7: "–∏—é–ª—å",
        8: "–∞–≤–≥—É—Å—Ç",
        9: "—Å–µ–Ω—Ç—è–±—Ä—å",
        10: "–æ–∫—Ç—è–±—Ä—å",
        11: "–Ω–æ—è–±—Ä—å",
        12: "–¥–µ–∫–∞–±—Ä—å",
    }

    await callback.message.edit_text(
        f"""<b>üì• –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>

–í—ã–±—Ä–∞–Ω –ø–µ—Ä–∏–æ–¥: <b>{month_names[month]} {year}</b>

<i>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏:</i>""",
        reply_markup=division_selection_kb(month=month, year=year),
    )
    await callback.answer()


@stats_router.callback_query(DivisionStatsExtract.filter(F.menu == "division"))
async def admin_extract_division(
    callback: CallbackQuery,
    callback_data: DivisionStatsExtract,
    questions_repo: RequestsRepo,
) -> None:
    """
    –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –º–µ—Å—è—Ü—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    """
    month = callback_data.month
    year = callback_data.year
    division = callback_data.division

    # –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    month_names = {
        1: "—è–Ω–≤–∞—Ä—å",
        2: "—Ñ–µ–≤—Ä–∞–ª—å",
        3: "–º–∞—Ä—Ç",
        4: "–∞–ø—Ä–µ–ª—å",
        5: "–º–∞–π",
        6: "–∏—é–Ω—å",
        7: "–∏—é–ª—å",
        8: "–∞–≤–≥—É—Å—Ç",
        9: "—Å–µ–Ω—Ç—è–±—Ä—å",
        10: "–æ–∫—Ç—è–±—Ä—å",
        11: "–Ω–æ—è–±—Ä—å",
        12: "–¥–µ–∫–∞–±—Ä—å",
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await callback.message.edit_text(
        f"""<b>üì• –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>

–ü–µ—Ä–∏–æ–¥: <b>{month_names[month]} {year}</b>
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: <b>{division}</b>

‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è..."""
    )

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
    questions: Sequence = await questions_repo.questions.get_questions_by_month(
        month=month, year=year, division=division
    )

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
    data = []
    for question_obj in questions:
        question = question_obj[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—ä–µ–∫—Ç Question –∏–∑ tuple

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞
        if question.status == "open":
            status = "–û—Ç–∫—Ä—ã—Ç"
        elif question.status == "in_progress":
            status = "–í —Ä–∞–±–æ—Ç–µ"
        elif question.status == "closed":
            status = "–ó–∞–∫—Ä—ã—Ç"
        else:
            status = question.status

        # –û—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_employee = (
            "–•–æ—Ä–æ—à–æ"
            if question.quality_employee
            else ("–ü–ª–æ—Ö–æ" if question.quality_employee is False else "")
        )
        quality_duty = (
            "–•–æ—Ä–æ—à–æ"
            if question.quality_duty
            else ("–ü–ª–æ—Ö–æ" if question.quality_duty is False else "")
        )

        # –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞
        allow_return = "–î–æ—Å—Ç—É–ø–µ–Ω" if question.allow_return else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

        data.append(
            {
                "–¢–æ–∫–µ–Ω": question.token,
                "–î–µ–∂—É—Ä–Ω—ã–π": question.topic_duty_fullname or "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω",
                "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç": question.employee_fullname,
                "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": question.employee_division or "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
                "–í–æ–ø—Ä–æ—Å": question.question_text,
                "–í—Ä–µ–º—è –≤–æ–ø—Ä–æ—Å–∞": question.start_time,
                "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è": question.end_time,
                "–°—Å—ã–ª–∫–∞ –Ω–∞ –ë–ó": question.clever_link,
                "–û—Ü–µ–Ω–∫–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞": quality_employee,
                "–û—Ü–µ–Ω–∫–∞ –¥–µ–∂—É—Ä–Ω–æ–≥–æ": quality_duty,
                "–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞": status,
                "–í–æ–∑–≤—Ä–∞—Ç": allow_return,
            }
        )

    if not data:
        await callback.message.edit_text(
            f"""<b>üì• –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>

–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞ <b>{month_names[month]} {year}</b> –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è <b>{division}</b>

–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –º–µ—Å—è—Ü –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ""",
            reply_markup=extract_kb(),
        )
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª excel –≤ –ø–∞–º—è—Ç–∏
    df = pd.DataFrame(data)
    excel_buffer = BytesIO()
    with pd.ExcelWriter(excel_buffer, engine="openpyxl") as writer:
        df.to_excel(writer, sheet_name=f"{division} - {month}_{year}", index=False)

    excel_buffer.seek(0)

    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    filename = f"–ò—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ {division} - {month_names[month]} {year}.xlsx"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –±—É—Ñ–µ—Ä
    excel_file = BufferedInputFile(excel_buffer.getvalue(), filename=filename)

    await callback.message.answer_document(
        excel_file,
        caption=f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {division}</b>

üìÖ –ü–µ—Ä–∏–æ–¥: {month_names[month]} {year}
üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {len(data)}""",
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await callback.message.answer(
        """<b>üì• –í—ã–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</b>

–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤—ã–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π

<i>–í—ã–±–µ—Ä–∏ –ø–µ—Ä–∏–æ–¥ –≤—ã–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—è –º–µ–Ω—é</i>""",
        reply_markup=extract_kb(),
    )

    await callback.answer()
