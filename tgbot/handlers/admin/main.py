import logging

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from infrastructure.database.models import User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.filters.admin import AdminFilter
from tgbot.filters.topic import IsTopicMessage
from tgbot.handlers.user.main import main_cb
from tgbot.keyboards.admin.main import (
    AdminMenu,
    ChangeRole,
    SelectDivision,
    admin_kb,
    division_selection_kb,
)
from tgbot.keyboards.user.main import user_kb
from tgbot.misc.dicts import role_names
from tgbot.misc.helpers import short_name
from tgbot.services.logger import setup_logging

admin_router = Router()
admin_router.message.filter(AdminFilter())

setup_logging()
logger = logging.getLogger(__name__)


@admin_router.message(CommandStart(), ~IsTopicMessage())
async def admin_start(
    message: Message, state: FSMContext, user: User, questions_repo: RequestsRepo
) -> None:
    employee_topics_today = await questions_repo.questions.get_questions_count_today(
        employee_fullname=user.FIO
    )
    employee_topics_month = (
        await questions_repo.questions.get_questions_count_last_month(
            employee_fullname=user.FIO
        )
    )

    state_data = await state.get_data()

    if "role" in state_data:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–æ–ª—å
        temp_division = state_data.get("temp_division", "")
        role_text = f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç ({temp_division})" if temp_division else "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"

        logging.info(
            f"[–ê–¥–º–∏–Ω] {message.from_user.username} ({message.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
        )
        await message.answer(
            f"""üëã –ü—Ä–∏–≤–µ—Ç, <b>{short_name(user.FIO)}</b>!

<b>üé≠ –¢–≤–æ—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–æ–ª—å:</b> {role_text}

<b>‚ùì –¢—ã –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
- –ó–∞ –¥–µ–Ω—å {employee_topics_today}
- –ó–∞ –º–µ—Å—è—Ü {employee_topics_month}

–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ""",
            reply_markup=user_kb(
                is_role_changed=True if state_data.get("role") else False
            ),
        )
        return

    await message.answer(
        f"""üëã –ü—Ä–∏–≤–µ—Ç, <b>{short_name(user.FIO)}</b>!

<b>üé≠ –¢–≤–æ—è —Ä–æ–ª—å:</b> {role_names[user.Role]}

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</i>""",
        reply_markup=admin_kb(),
    )

    logging.info(
        f"[–ê–¥–º–∏–Ω] {message.from_user.username} ({message.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é"
    )


@admin_router.callback_query(ChangeRole.filter())
async def change_role(
    callback: CallbackQuery,
    callback_data: ChangeRole,
    state: FSMContext,
    questions_repo: RequestsRepo,
    user: User,
) -> None:
    match callback_data.role:
        case "spec":
            await state.update_data(role=1)  # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
            logging.info(
                f"[–ê–¥–º–∏–Ω] {callback.from_user.username} ({callback.from_user.id}): –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ —Å {user.Role} –Ω–∞ 1"
            )

    await main_cb(
        callback=callback, state=state, questions_repo=questions_repo, user=user
    )
    await callback.answer()


@admin_router.callback_query(AdminMenu.filter(F.menu == "reset"))
async def reset_role_cb(callback: CallbackQuery, state: FSMContext, user: User) -> None:
    """
    –°–±—Ä–æ—Å –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    """
    state_data = await state.get_data()
    await state.clear()

    await callback.message.edit_text(
        f"""–ü—Ä–∏–≤–µ—Ç, <b>{short_name(user.FIO)}</b>!

<b>üé≠ –¢–≤–æ—è —Ä–æ–ª—å:</b> {role_names[user.Role]}

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</i>""",
        reply_markup=admin_kb(),
    )

    logging.info(
        f"[–ê–¥–º–∏–Ω] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ —Å {state_data.get('role')} –Ω–∞ {user.Role} –∫–Ω–æ–ø–∫–æ–π"
    )
    await callback.answer()


@admin_router.callback_query(AdminMenu.filter(F.menu == "change_role"))
async def show_division_selection(
    callback: CallbackQuery,
) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏
    """
    await callback.message.edit_text(
        """<b>üé≠ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏</b>

–í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Ä–æ–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞:
- <b>–ù–¶–ö</b> - –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ù–¶–ö
- <b>–ù–¶–ö –û–†</b> - –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ù–¶–ö –û–±—â–µ–≥–æ –†—è–¥–∞ (—Å—Ç–∞–∂—ë—Ä—ã)
- <b>–ù–¢–ü</b> - –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ù–¢–ü""",
        reply_markup=division_selection_kb(),
    )

    logging.info(
        f"[–ê–¥–º–∏–Ω] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    )
    await callback.answer()


@admin_router.callback_query(SelectDivision.filter())
async def change_role_to_division(
    callback: CallbackQuery,
    callback_data: SelectDivision,
    state: FSMContext,
    questions_repo: RequestsRepo,
    user: User,
) -> None:
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    division = callback_data.division

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ (1) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    await state.update_data(
        role=1,  # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç
        temp_division=division,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    )

    logging.info(
        f"[–ê–¥–º–∏–Ω] {callback.from_user.username} ({callback.from_user.id}): "
        f"–†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ —Å {user.Role} –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {division}"
    )

    await main_cb(
        callback=callback, state=state, questions_repo=questions_repo, user=user
    )
    await callback.answer()


@admin_router.message(Command("reset"))
async def reset_role_cmd(message: Message, state: FSMContext, user: User) -> None:
    """
    –°–±—Ä–æ—Å –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ä–æ–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
    """
    state_data = await state.get_data()
    await state.clear()

    await message.answer(
        f"""üëã –ü—Ä–∏–≤–µ—Ç, <b>{short_name(user.FIO)}</b>!

<b>üé≠ –¢–≤–æ—è —Ä–æ–ª—å:</b> {role_names[user.Role]}

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º</i>""",
        reply_markup=admin_kb(),
    )

    logging.info(
        f"[–ê–¥–º–∏–Ω] {message.from_user.username} ({message.from_user.id}): –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ —Å {state_data.get('role')} –Ω–∞ {user.Role} –∫–æ–º–∞–Ω–¥–æ–π"
    )


@admin_router.callback_query(AdminMenu.filter(F.menu == "main"))
async def back_to_main_menu(
    callback: CallbackQuery,
    state: FSMContext,
    user: User,
    questions_repo: RequestsRepo,
) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    """
    await admin_start(callback.message, state, user, questions_repo)
    await callback.answer()
