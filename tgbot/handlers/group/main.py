import logging
from datetime import datetime
from typing import Sequence

from aiogram import F, Router
from aiogram.exceptions import TelegramAPIError
from aiogram.types import (
    CallbackQuery,
    InputMediaAnimation,
    InputMediaAudio,
    InputMediaDocument,
    InputMediaPhoto,
    InputMediaVideo,
    Message,
)

from infrastructure.database.models import MessagesPair, Question, User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.filters.topic import IsTopicMessage
from tgbot.handlers.group.cmds import end_q_cmd
from tgbot.keyboards.group.main import (
    QuestionAllowReturn,
    QuestionQualityDuty,
    closed_question_duty_kb,
    question_quality_duty_kb,
)
from tgbot.keyboards.user.main import (
    finish_question_kb,
)
from tgbot.middlewares.message_pairing import store_message_connection
from tgbot.misc import dicts
from tgbot.misc.helpers import check_premium_emoji
from tgbot.services.logger import setup_logging
from tgbot.services.scheduler import (
    restart_inactivity_timer,
    run_delete_timer,
    start_inactivity_timer,
)

topic_router = Router()

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)


@topic_router.message(IsTopicMessage())
async def handle_q_message(
    message: Message,
    user: User,
    questions_repo: RequestsRepo,
    main_repo: RequestsRepo,
    question: Question,
):
    if message.text == "‚úÖÔ∏è –ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å":
        await end_q_cmd(
            message=message,
            user=user,
            questions_repo=questions_repo,
            main_repo=main_repo,
            question=question,
        )
        return

    if question is not None and question.status != "closed":
        if not question.topic_duty_fullname:
            duty_topics_today = (
                await questions_repo.questions.get_questions_count_today(
                    duty_fullname=user.FIO
                )
            )
            duty_topics_month = (
                await questions_repo.questions.get_questions_count_last_month(
                    duty_fullname=user.FIO
                )
            )

            await questions_repo.questions.update_question_duty(
                token=question.token, topic_duty=user.FIO
            )
            await questions_repo.questions.update_question_status(
                token=question.token, status="in_progress"
            )

            employee: User = await main_repo.users.get_user(
                fullname=question.employee_fullname
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            await start_inactivity_timer(
                question_token=question.token,
                bot=message.bot,
                questions_repo=questions_repo,
            )

            await message.bot.edit_forum_topic(
                chat_id=config.tg_bot.forum_id,
                message_thread_id=question.topic_id,
                icon_custom_emoji_id=dicts.topicEmojis["in_progress"],
            )
            await message.answer(
                f"""<b>üëÆ‚Äç‚ôÇÔ∏è –í–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç–µ</b>

–ù–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç–≤–µ—á–∞–µ—Ç <b>{user.FIO}</b> {'(<a href="https://t.me/' + user.Username + '">–ª—Å</a>)' if (user.Username != "–ù–µ —É–∫–∞–∑–∞–Ω" or user.Username != "–°–∫—Ä—ã—Ç–æ/–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ") else ""}

<blockquote expandable><b>‚öíÔ∏è –†–µ—à–µ–Ω–æ:</b> –∑–∞ –¥–µ–Ω—å {duty_topics_today} / –∑–∞ –º–µ—Å—è—Ü {duty_topics_month}</blockquote>""",
                disable_web_page_preview=True,
            )

            await message.bot.send_message(
                chat_id=employee.ChatId,
                text=f"""<b>üëÆ‚Äç‚ôÇÔ∏è –í–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç–µ</b>

–°—Ç–∞—Ä—à–∏–π <b>{user.FIO}</b> –≤–∑—è–ª –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç—É""",
                reply_markup=finish_question_kb(),
            )

            copied_message = await message.bot.copy_message(
                from_chat_id=config.tg_bot.forum_id,
                message_id=message.message_id,
                chat_id=employee.ChatId,
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–Ω–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            try:
                await store_message_connection(
                    questions_repo=questions_repo,
                    user_chat_id=question.employee_chat_id,
                    user_message_id=copied_message.message_id,
                    topic_chat_id=int(config.tg_bot.forum_id),
                    topic_message_id=message.message_id,
                    topic_thread_id=question.topic_id,
                    question_token=question.token,
                    direction="topic_to_user",
                )
            except Exception as e:
                logger.error(f"Failed to store message connection: {e}")

            logger.info(
                f"[–í–æ–ø—Ä–æ—Å] - [–í —Ä–∞–±–æ—Ç–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –í–æ–ø—Ä–æ—Å {question.token} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É"
            )
        else:
            if question.topic_duty_fullname == user.FIO:
                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –¥–µ–∂—É—Ä–Ω–æ–≥–æ
                await restart_inactivity_timer(
                    question_token=question.token,
                    bot=message.bot,
                    questions_repo=questions_repo,
                )

                # –ï—Å–ª–∏ —Ä–µ–ø–ª–∞–π - –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç–æ–º
                if message.reply_to_message:
                    # –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑—å —Å –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    message_pair = (
                        await questions_repo.messages_pairs.find_by_topic_message(
                            topic_chat_id=int(config.tg_bot.forum_id),
                            topic_message_id=message.reply_to_message.message_id,
                        )
                    )

                    if message_pair:
                        # –ö–æ–ø–∏—Ä—É–µ–º —Å –æ—Ç–≤–µ—Ç–æ–º –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–≤—è–∑—å
                        copied_message = await message.bot.copy_message(
                            from_chat_id=config.tg_bot.forum_id,
                            message_id=message.message_id,
                            chat_id=question.employee_chat_id,
                            reply_to_message_id=message_pair.user_message_id,
                        )
                        logger.info(
                            f"[–í–æ–ø—Ä–æ—Å] - [–û—Ç–≤–µ—Ç] –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –¥–µ–∂—É—Ä–Ω–æ–≥–æ: {config.tg_bot.forum_id}:{message.reply_to_message.message_id} -> {message_pair.user_chat_id}:{message_pair.user_message_id}"
                        )
                    else:
                        # –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∏, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º
                        copied_message = await message.bot.copy_message(
                            from_chat_id=config.tg_bot.forum_id,
                            message_id=message.message_id,
                            chat_id=question.employee_chat_id,
                        )
                else:
                    copied_message = await message.bot.copy_message(
                        from_chat_id=config.tg_bot.forum_id,
                        message_id=message.message_id,
                        chat_id=question.employee_chat_id,
                    )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–Ω–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                try:
                    await store_message_connection(
                        questions_repo=questions_repo,
                        user_chat_id=question.employee_chat_id,
                        user_message_id=copied_message.message_id,
                        topic_chat_id=int(config.tg_bot.forum_id),
                        topic_message_id=message.message_id,
                        topic_thread_id=question.topic_id,
                        question_token=question.token,
                        direction="topic_to_user",
                    )
                except Exception as e:
                    logger.error(f"Failed to store message connection: {e}")

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏
                have_premium_emoji, emoji_ids = await check_premium_emoji(message)
                if have_premium_emoji and emoji_ids:
                    emoji_sticker_list = await message.bot.get_custom_emoji_stickers(
                        emoji_ids
                    )

                    sticker_info = []
                    for emoji_sticker in emoji_sticker_list:
                        sticker_info.append(f"{emoji_sticker.emoji}")

                    stickers_text = "".join(sticker_info)

                    emoji_message = await message.reply(f"""<b>üíé –ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏</b>

–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–≤–∏–¥–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏: {stickers_text}

<i>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥</i>""")
                    await run_delete_timer(
                        bot=message.bot,
                        chat_id=int(config.tg_bot.forum_id),
                        message_ids=[emoji_message.message_id],
                        seconds=30,
                    )

                logger.info(
                    f"[–í–æ–ø—Ä–æ—Å] - [–û–±—â–µ–Ω–∏–µ] –¢–æ–∫–µ–Ω: {question.token} | –°—Ç–∞—Ä—à–∏–π: {question.topic_duty_fullname} | –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
                )
            else:
                await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>

–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!

<i>–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É</i>""")
                logger.warning(
                    f"[–í–æ–ø—Ä–æ—Å] - [–û–±—â–µ–Ω–∏–µ] –¢–æ–∫–µ–Ω: {question.token} | –°—Ç–∞—Ä—à–∏–π: {question.topic_duty_fullname} | –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}. –ß–∞—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É —Å—Ç–∞—Ä—à–µ–º—É"
                )
    elif question.status == "closed":
        await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>

–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç!

<i>–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É</i>""")
        logger.warning(
            f"[–í–æ–ø—Ä–æ—Å] - [–û–±—â–µ–Ω–∏–µ] –¢–æ–∫–µ–Ω: {question.token} | –°—Ç–∞—Ä—à–∏–π: {question.topic_duty_fullname} | –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}. –ß–∞—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç"
        )
    else:
        await message.answer("""<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –≤ –±–∞–∑–µ, –∑–∞–∫—Ä—ã–≤–∞—é""")
        await message.bot.close_forum_topic(
            chat_id=config.tg_bot.forum_id,
            message_thread_id=message.message_thread_id,
        )
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–û–±—â–µ–Ω–∏–µ] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ —Å TopicId = {message.message_thread_id}. –ó–∞–∫—Ä—ã–ª–∏ —Ç–µ–º—É"
        )


@topic_router.edited_message(IsTopicMessage())
async def handle_edited_message(
    message: Message, questions_repo: RequestsRepo, user: User, question: Question
):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã—Ö —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–æ–ø–∏–∫–∞—Ö"""
    if not question:
        logger.error(
            f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —Ç–æ–ø–∏–∫–∞: {message.message_thread_id}"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
    if question.status == "closed":
        logger.warning(
            f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –î–µ–∂—É—Ä–Ω—ã–π {user.FIO} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ {question.token}"
        )
        return

    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø–∞—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pair_to_edit: MessagesPair = await questions_repo.messages_pairs.find_pair_for_edit(
        chat_id=message.chat.id, message_id=message.message_id
    )

    if not pair_to_edit:
        logger.warning(
            f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {message.chat.id}:{message.message_id}"
        )
        return

    edit_timestamp = f"\n\n<i>–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –¥–µ–∂—É—Ä–Ω—ã–º ‚Äî {datetime.now().strftime('%H:%M %d.%m.%Y')}</i>"

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–µ–¥–∏–∞
        if any(
            [
                message.photo,
                message.video,
                message.document,
                message.audio,
                message.animation,
            ]
        ):
            new_media = None

            if message.animation:
                new_media = InputMediaAnimation(media=message.animation.file_id)
            elif message.audio:
                new_media = InputMediaAudio(media=message.audio.file_id)
            elif message.document:
                new_media = InputMediaDocument(media=message.document.file_id)
            elif message.photo:
                new_media = InputMediaPhoto(media=message.photo[-1].file_id)
            elif message.video:
                new_media = InputMediaVideo(media=message.video.file_id)

            if not new_media:
                logger.warning(
                    "[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return

            if message.caption:
                new_media.caption = message.caption + edit_timestamp
                new_media.caption_entities = message.caption_entities
            else:
                new_media.caption = edit_timestamp.strip()

            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –≤ —á–∞—Ç–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
            await message.bot.edit_message_media(
                chat_id=pair_to_edit.user_chat_id,
                message_id=pair_to_edit.user_message_id,
                media=new_media,
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã–º
            await message.bot.send_message(
                chat_id=pair_to_edit.user_chat_id,
                text=f"""<b>‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>

–î–µ–∂—É—Ä–Ω—ã–π <b>{user.FIO}</b> –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ""",
                reply_to_message_id=pair_to_edit.user_message_id,
            )

            logger.info(
                f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –≤–æ–ø—Ä–æ—Å–µ {question.token}"
            )

        elif message.text:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –º–µ–¥–∏–∞
            await message.bot.edit_message_text(
                chat_id=pair_to_edit.user_chat_id,
                message_id=pair_to_edit.user_message_id,
                text=message.text + edit_timestamp,
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–µ–∂—É—Ä–Ω—ã–º
            await message.bot.send_message(
                chat_id=pair_to_edit.user_chat_id,
                text=f"""<b>‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>

–î–µ–∂—É—Ä–Ω—ã–π <b>{user.FIO}</b> –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ""",
                reply_to_message_id=pair_to_edit.user_message_id,
            )

            logger.info(
                f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –≤–æ–ø—Ä–æ—Å–µ {question.token}"
            )

        else:
            logger.warning(
                "[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –º–µ–¥–∏–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )

    except TelegramAPIError as e:
        logger.error(
            f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–æ–ø—Ä–æ—Å–µ {question.token}: {e}"
        )
    except Exception as e:
        logger.error(
            f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}"
        )


@topic_router.callback_query(QuestionQualityDuty.filter(F.return_question))
async def return_q_duty(
    callback: CallbackQuery,
    user: User,
    questions_repo: RequestsRepo,
    question: Question,
):
    available_to_return_questions: Sequence[
        Question
    ] = await questions_repo.questions.get_available_to_return_questions()
    active_questions = await questions_repo.questions.get_active_questions()

    if (
        question.status == "closed"
        and question.employee_fullname
        not in [u.employee_fullname for u in active_questions]
        and question.token in [d.token for d in available_to_return_questions]
        and question.topic_duty_fullname == user.FIO
    ):
        await questions_repo.questions.update_question_status(
            token=question.token, status="open"
        )

        await callback.bot.edit_forum_topic(
            chat_id=config.tg_bot.forum_id,
            message_thread_id=question.topic_id,
            name=user.FIO
            if config.tg_bot.division == "–ù–¶–ö"
            else f"{user.Division} | {user.FIO}",
            icon_custom_emoji_id=dicts.topicEmojis["in_progress"],
        )
        await callback.bot.reopen_forum_topic(
            chat_id=config.tg_bot.forum_id, message_thread_id=question.topic_id
        )

        await callback.message.answer("""<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É""")
        await callback.bot.send_message(
            chat_id=question.employee_chat_id,
            text=f"""<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–°—Ç–∞—Ä—à–∏–π <b>{user.FIO}</b> –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å:
<blockquote expandable><i>{question.question_text}</i></blockquote>""",
            reply_markup=finish_question_kb(),
        )
        logger.info(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –í–æ–ø—Ä–æ—Å {question.token} –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç —Å—Ç–∞—Ä—à–∏–º"
        )
    elif question.topic_duty_fullname != user.FIO:
        await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!", show_alert=True)
        logger.warning(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, –≤–æ–ø—Ä–æ—Å {question.token} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É —Å—Ç–∞—Ä—à–µ–º—É"
        )
    elif question.employee_fullname in [d.employee_fullname for d in active_questions]:
        await callback.answer(
            "–£ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å", show_alert=True
        )
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {question.employee_fullname} –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å"
        )
    elif question.token not in [d.token for d in available_to_return_questions]:
        await callback.answer(
            "–í–æ–ø—Ä–æ—Å –Ω–µ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å. –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            show_alert=True,
        )
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, –¥–∏–∞–ª–æ–≥ {question.token} –±—ã–ª –∑–∞–∫—Ä—ã—Ç –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        )
    elif question.status != "closed":
        await callback.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–∫—Ä—ã—Ç", show_alert=True)
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, –¥–∏–∞–ª–æ–≥ {question.token} –Ω–µ –∑–∞–∫—Ä—ã—Ç"
        )

    await callback.answer()


@topic_router.callback_query(IsTopicMessage() and QuestionAllowReturn.filter())
async def change_q_return_status(
    callback: CallbackQuery,
    callback_data: QuestionQualityDuty,
    question: Question,
    questions_repo: RequestsRepo,
):
    await questions_repo.questions.update_question_return_status(
        token=callback_data.token, status=callback_data.allow_return
    )
    if callback_data.allow_return:
        await callback.answer("üü¢ –í–æ–∑–≤—Ä–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –±—ã–ª —Ä–∞–∑—Ä–µ—à–µ–Ω")
    else:
        await callback.answer("‚õî –í–æ–∑–≤—Ä–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –±—ã–ª —Ä–∞–∑—Ä–µ—à–µ–Ω")

    await callback.message.edit_reply_markup(
        reply_markup=question_quality_duty_kb(
            token=callback_data.token,
            show_quality=True if question.quality_duty is None else None,
            allow_return=callback_data.allow_return,
        )
    )


@topic_router.callback_query(IsTopicMessage() and QuestionQualityDuty.filter())
async def quality_q_duty(
    callback: CallbackQuery,
    callback_data: QuestionQualityDuty,
    user: User,
    questions_repo: RequestsRepo,
    question: Question,
):
    if question.topic_duty_fullname == user.FIO:
        await questions_repo.questions.update_question_quality(
            token=callback_data.token, quality=callback_data.answer, is_duty=True
        )
        await callback.answer("–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚ù§Ô∏è")
        if callback_data.answer:
            await callback.message.edit_text(
                f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>

üëÆ‚Äç‚ôÇÔ∏è –°—Ç–∞—Ä—à–∏–π <b>{user.FIO}</b> –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É:
üëé –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>–º–æ–≥ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>""",
                reply_markup=closed_question_duty_kb(
                    token=callback_data.token,
                ),
            )
        else:
            await callback.message.edit_text(
                f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>

üëÆ‚Äç‚ôÇÔ∏è –°—Ç–∞—Ä—à–∏–π <b>{user.FIO}</b> –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É:
üëç –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>–Ω–µ –º–æ–≥ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>""",
                reply_markup=closed_question_duty_kb(token=callback_data.token),
            )

        logger.info(
            f"[–í–æ–ø—Ä–æ—Å] - [–û—Ü–µ–Ω–∫–∞] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ {callback_data.answer} –≤–æ–ø—Ä–æ—Å—É {question.token} –æ—Ç —Å—Ç–∞—Ä—à–µ–≥–æ"
        )
    else:
        await callback.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!", show_alert=True)
        logger.warning(
            f"[–í–æ–ø—Ä–æ—Å] - [–û—Ü–µ–Ω–∫–∞] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É {callback_data.answer} –≤–æ–ø—Ä–æ—Å—É {question.token}. –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É —Å—Ç–∞—Ä—à–µ–º—É"
        )
    await callback.answer()
