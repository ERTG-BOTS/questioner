import datetime
import logging

import pytz
from aiogram import F, Router
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove

from infrastructure.database.models import Question, User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.filters.topic import IsTopicMessageWithCommand
from tgbot.keyboards.group.main import FinishedQuestion, question_quality_duty_kb
from tgbot.keyboards.user.main import question_quality_specialist_kb
from tgbot.misc.helpers import short_name
from tgbot.services.logger import setup_logging
from tgbot.services.scheduler import (
    start_attention_reminder,
    stop_inactivity_timer,
)

topic_cmds_router = Router()

setup_logging()
logger = logging.getLogger(__name__)


@topic_cmds_router.message(IsTopicMessageWithCommand("end"))
async def end_q_cmd(
    message: Message,
    user: User,
    questions_repo: RequestsRepo,
    main_repo: RequestsRepo,
):
    question: Question = await questions_repo.questions.get_question(
        group_id=message.chat.id, topic_id=message.message_thread_id
    )

    if question is not None:
        group_settings = await questions_repo.settings.get_settings_by_group_id(
            group_id=question.group_id,
        )

        if question.status != "closed" and (
            question.topic_duty_fullname == user.FIO or user.Role == 10
        ):
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
            stop_inactivity_timer(question.token)

            await questions_repo.questions.update_question(
                token=question.token,
                status="closed",
                end_time=datetime.datetime.now(tz=pytz.timezone("Asia/Yekaterinburg")),
            )

            if question.quality_duty is not None:
                if question.quality_duty:
                    await message.bot.send_message(
                        chat_id=question.group_id,
                        message_thread_id=question.topic_id,
                        text=f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>

üëÆ‚Äç‚ôÇÔ∏è –î–µ–∂—É—Ä–Ω—ã–π: <b>{question.topic_duty_fullname if question.topic_duty_fullname else "–ù–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω"}</b>
üëç –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>–Ω–µ –º–æ–≥ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>""",
                        reply_markup=question_quality_duty_kb(
                            token=question.token,
                            show_quality=None,
                            allow_return=question.allow_return,
                        ),
                    )
                else:
                    await message.bot.send_message(
                        chat_id=question.group_id,
                        message_thread_id=question.topic_id,
                        text=f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>
                        
üëÆ‚Äç‚ôÇÔ∏è –î–µ–∂—É—Ä–Ω—ã–π: <b>{question.topic_duty_fullname}</b>
üëé –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>–º–æ–≥ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>""",
                        reply_markup=question_quality_duty_kb(
                            token=question.token,
                            show_quality=None,
                            allow_return=question.allow_return,
                        ),
                    )
            else:
                await message.bot.send_message(
                    chat_id=question.group_id,
                    message_thread_id=question.topic_id,
                    text=f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>
                    
üëÆ‚Äç‚ôÇÔ∏è –î–µ–∂—É—Ä–Ω—ã–π: <b>{question.topic_duty_fullname}</b>
–û—Ü–µ–Ω–∏, –º–æ–≥ –ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ä–µ—à–∏—Ç—å –µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ""",
                    reply_markup=question_quality_duty_kb(
                        token=question.token,
                        show_quality=True,
                        allow_return=question.allow_return,
                    ),
                )

            await message.bot.edit_forum_topic(
                chat_id=question.group_id,
                message_thread_id=question.topic_id,
                name=question.token,
                icon_custom_emoji_id=group_settings.get_setting("emoji_closed"),
            )
            await message.bot.close_forum_topic(
                chat_id=question.group_id,
                message_thread_id=question.topic_id,
            )

            employee: User = await main_repo.users.get_user(
                fullname=question.employee_fullname
            )

            await message.bot.send_message(
                chat_id=employee.ChatId,
                text="<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>",
                reply_markup=ReplyKeyboardRemove(),
            )

            await message.bot.send_message(
                chat_id=employee.ChatId,
                text=f"""–î–µ–∂—É—Ä–Ω—ã–π <b>{short_name(user.FIO)}</b> –∑–∞–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å
–û—Ü–µ–Ω–∏, –ø–æ–º–æ–≥–ª–∏ –ª–∏ —Ç–µ–±–µ —Ä–µ—à–∏—Ç—å –µ–≥–æ""",
                reply_markup=question_quality_specialist_kb(token=question.token),
            )

            logger.info(
                f"[–í–æ–ø—Ä–æ—Å] - [–ó–∞–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ó–∞–∫—Ä—ã—Ç –≤–æ–ø—Ä–æ—Å {question.token} —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º {question.employee_fullname}"
            )
        elif question.status != "closed" and question.topic_duty_fullname != user.FIO:
            await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>

–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!

<i>–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É</i>""")
            logger.warning(
                f"[–í–æ–ø—Ä–æ—Å] - [–ó–∞–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ {question.token} –Ω–µ—É—Å–ø–µ—à–Ω–∞. –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É –¥–µ–∂—É—Ä–Ω–æ–º—É"
            )
        elif question.status == "closed":
            await message.bot.edit_forum_topic(
                chat_id=question.group_id,
                message_thread_id=question.topic_id,
                name=question.token,
                icon_custom_emoji_id=group_settings.get_setting("emoji_closed"),
            )
            await message.reply("<b>üîí –í–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞–∫—Ä—ã—Ç</b>")
            await message.bot.close_forum_topic(
                chat_id=question.group_id,
                message_thread_id=question.topic_id,
            )
            logger.warning(
                f"[–í–æ–ø—Ä–æ—Å] - [–ó–∞–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ {question.token} –Ω–µ—É—Å–ø–µ—à–Ω–∞. –í–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç"
            )

    else:
        await message.answer("""<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –≤ –±–∞–∑–µ""")
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ó–∞–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ —Å TopicId = {message.message_id}"
        )


@topic_cmds_router.message(IsTopicMessageWithCommand("release"))
async def release_q_cmd(
    message: Message, user: User, questions_repo: RequestsRepo, main_repo: RequestsRepo
):
    question: Question = await questions_repo.questions.get_question(
        group_id=message.chat.id, topic_id=message.message_thread_id
    )

    if question is not None:
        if question.topic_duty_fullname is not None and (
            question.topic_duty_fullname == user.FIO or user.Role == 10
        ):
            group_settings = await questions_repo.settings.get_settings_by_group_id(
                group_id=question.group_id,
            )

            await questions_repo.questions.update_question(
                token=question.token,
                topic_duty_fullname=None,
                status="open",
            )

            employee: User = await main_repo.users.get_user(
                fullname=question.employee_fullname
            )

            await message.bot.edit_forum_topic(
                chat_id=question.group_id,
                message_thread_id=question.topic_id,
                icon_custom_emoji_id=group_settings.get_setting("emoji_open"),
            )
            await message.answer("""<b>üïäÔ∏è –í–æ–ø—Ä–æ—Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω</b>

–î–ª—è –≤–∑—è—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–±–æ—Ç—É –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç—É —Ç–µ–º—É""")

            await message.bot.send_message(
                chat_id=employee.ChatId,
                text=f"""<b>üïäÔ∏è –î–µ–∂—É—Ä–Ω—ã–π –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç</b>

–î–µ–∂—É—Ä–Ω—ã–π <b>{short_name(user.FIO)}</b> –æ—Å–≤–æ–±–æ–¥–∏–ª –≤–æ–ø—Ä–æ—Å. –û–∂–∏–¥–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ–≥–æ""",
            )
            await start_attention_reminder(question.token, questions_repo)
            logger.info(
                f"[–í–æ–ø—Ä–æ—Å] - [–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –í–æ–ø—Ä–æ—Å {question.token} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω"
            )
        elif question.topic_duty_fullname and question.topic_duty_fullname != user.FIO:
            await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>

–≠—Ç–æ –Ω–µ —Ç–≤–æ–π —á–∞—Ç!

<i>–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É</i>""")
            logger.warning(
                f"[–í–æ–ø—Ä–æ—Å] - [–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ {question.token} –Ω–µ—É—Å–ø–µ—à–Ω–∞. –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –¥—Ä—É–≥–æ–º—É —Å—Ç–∞—Ä—à–µ–º—É"
            )
        elif question.topic_duty_fullname is None:
            await message.reply("""<b>‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ</b>

–≠—Ç–æ —á–∞—Ç —Å–µ–π—á–∞—Å –Ω–∏–∫–µ–º –Ω–µ –∑–∞–Ω—è—Ç!""")
            logger.warning(
                f"[–í–æ–ø—Ä–æ—Å] - [–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ {question.token} –Ω–µ—É—Å–ø–µ—à–Ω–∞. –í–æ–ø—Ä–æ—Å {question.token} –Ω–∏–∫–µ–º –Ω–µ –∑–∞–Ω—è—Ç"
            )
    else:
        await message.answer("""<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â—É—é —Ç–µ–º—É –≤ –±–∞–∑–µ, –∑–∞–∫—Ä—ã–≤–∞—é""")
        await message.bot.close_forum_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
        )
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ —Å TopicId = {message.message_thread_id}"
        )


@topic_cmds_router.callback_query(FinishedQuestion.filter(F.action == "release"))
async def release_q_cb(
    callback: CallbackQuery,
    questions_repo: RequestsRepo,
):
    await callback.answer()

    question: Question = await questions_repo.questions.get_question(
        group_id=callback.message.chat.id, topic_id=callback.message.message_thread_id
    )

    if question:
        group_settings = await questions_repo.settings.get_settings_by_group_id(
            group_id=question.group_id,
        )

        await questions_repo.questions.update_question(
            token=question.token,
            topic_duty_fullname=None,
            status="open",
        )

        await callback.message.answer("""<b>üïäÔ∏è –í–æ–ø—Ä–æ—Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω</b>

–î–ª—è –≤–∑—è—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–±–æ—Ç—É –Ω–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç—É —Ç–µ–º—É""")
        logger.info(
            f"[–í–æ–ø—Ä–æ—Å] - [–û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –í–æ–ø—Ä–æ—Å {question.token} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω"
        )

        await callback.bot.edit_forum_topic(
            chat_id=question.group_id,
            message_thread_id=question.topic_id,
            icon_custom_emoji_id=group_settings.get_setting("emoji_open"),
        )

        await start_attention_reminder(question.token, questions_repo)
