import datetime
import logging

from aiogram import F, Router
from aiogram.exceptions import TelegramAPIError
from aiogram.types import (
    CallbackQuery,
    InputMediaAnimation,
    InputMediaAudio,
    InputMediaDocument,
    InputMediaPhoto,
    InputMediaVideo,
    Message,
    ReplyKeyboardRemove,
)

from infrastructure.database.models import MessagesPair, Question, User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.filters.active_question import ActiveQuestion, ActiveQuestionWithCommand
from tgbot.keyboards.group.main import question_quality_duty_kb
from tgbot.keyboards.user.main import (
    QuestionQualitySpecialist,
    closed_question_specialist_kb,
    question_quality_specialist_kb,
)
from tgbot.middlewares.message_pairing import store_message_connection
from tgbot.misc import dicts
from tgbot.misc.helpers import check_premium_emoji
from tgbot.services.logger import setup_logging
from tgbot.services.scheduler import (
    restart_inactivity_timer,
    run_delete_timer,
    stop_inactivity_timer,
)

user_q_router = Router()

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)


@user_q_router.message(ActiveQuestionWithCommand("end"))
async def active_question_end(
    message: Message,
    questions_repo: RequestsRepo,
    user: User,
    question: Question,
):
    if question is not None:
        if question.status != "closed":
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
            stop_inactivity_timer(question.token)

            await questions_repo.questions.update_question_status(
                token=question.token, status="closed"
            )
            await questions_repo.questions.update_question_end(
                token=question.token, end_time=datetime.datetime.now()
            )

            if question.quality_duty is not None:
                if question.quality_duty:
                    await message.bot.send_message(
                        chat_id=config.tg_bot.ntp_forum_id
                        if "–ù–¢–ü" in user.Division
                        else config.tg_bot.nck_forum_id,
                        message_thread_id=question.topic_id,
                        text=f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>
    
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>{user.FIO}</b> –∑–∞–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å
üëç –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>–Ω–µ –º–æ–≥ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>""",
                        reply_markup=question_quality_duty_kb(
                            token=question.token,
                            show_quality=None,
                            allow_return=question.allow_return,
                        ),
                    )
                else:
                    await message.bot.send_message(
                        chat_id=config.tg_bot.ntp_forum_id
                        if "–ù–¢–ü" in user.Division
                        else config.tg_bot.nck_forum_id,
                        message_thread_id=question.topic_id,
                        text=f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>

–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>{user.FIO}</b> –∑–∞–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å
üëé –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>–º–æ–≥ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>""",
                        reply_markup=question_quality_duty_kb(
                            token=question.token,
                            show_quality=None,
                            allow_return=question.allow_return,
                        ),
                    )
            else:
                await message.bot.send_message(
                    chat_id=config.tg_bot.ntp_forum_id
                    if "–ù–¢–ü" in user.Division
                    else config.tg_bot.nck_forum_id,
                    message_thread_id=question.topic_id,
                    text=f"""<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>

–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>{user.FIO}</b> –∑–∞–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å
–û—Ü–µ–Ω–∏, –º–æ–≥ –ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Ä–µ—à–∏—Ç—å –µ–≥–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ""",
                    reply_markup=question_quality_duty_kb(
                        token=question.token,
                        show_quality=True,
                        allow_return=question.allow_return,
                    ),
                )

            await message.bot.edit_forum_topic(
                chat_id=config.tg_bot.ntp_forum_id
                if "–ù–¢–ü" in user.Division
                else config.tg_bot.nck_forum_id,
                message_thread_id=question.topic_id,
                name=question.token,
                icon_custom_emoji_id=dicts.topicEmojis["closed"],
            )
            await message.bot.close_forum_topic(
                chat_id=config.tg_bot.ntp_forum_id
                if "–ù–¢–ü" in user.Division
                else config.tg_bot.nck_forum_id,
                message_thread_id=question.topic_id,
            )

            await message.reply(
                text="<b>üîí –í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç</b>", reply_markup=ReplyKeyboardRemove()
            )
            await message.answer(
                """–¢—ã –∑–∞–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å
–û—Ü–µ–Ω–∏, –ø–æ–º–æ–≥–ª–∏ –ª–∏ —Ç–µ–±–µ —Ä–µ—à–∏—Ç—å –≤–æ–ø—Ä–æ—Å""",
                reply_markup=question_quality_specialist_kb(token=question.token),
            )

            logger.info(
                f"[–í–æ–ø—Ä–æ—Å] - [–ó–∞–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ó–∞–∫—Ä—ã—Ç –≤–æ–ø—Ä–æ—Å {question.token} —Å–æ —Å—Ç–∞—Ä—à–∏–º {question.topic_duty_fullname}"
            )
        elif question.status == "closed":
            await message.bot.edit_forum_topic(
                chat_id=config.tg_bot.ntp_forum_id
                if "–ù–¢–ü" in user.Division
                else config.tg_bot.nck_forum_id,
                message_thread_id=question.topic_id,
                name=question.token,
                icon_custom_emoji_id=dicts.topicEmojis["closed"],
            )
            await message.reply("<b>üîí –í–æ–ø—Ä–æ—Å –±—ã–ª –∑–∞–∫—Ä—ã—Ç</b>")
            await message.bot.close_forum_topic(
                chat_id=config.tg_bot.ntp_forum_id
                if "–ù–¢–ü" in user.Division
                else config.tg_bot.nck_forum_id,
                message_thread_id=question.topic_id,
            )
            logger.info(
                f"[–í–æ–ø—Ä–æ—Å] - [–ó–∞–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ {question.token} —Å–æ —Å—Ç–∞—Ä—à–∏–º {question.topic_duty_fullname}. –í–æ–ø—Ä–æ—Å —É–∂–µ –∑–∞–∫—Ä—ã—Ç"
            )

    else:
        await message.answer("""<b>‚ö†Ô∏è –û—à–∏–±–∫–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ""")
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ó–∞–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} ({message.from_user.id}): –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞. –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑–µ —Å TopicId = {message.message_id}"
        )


@user_q_router.message(ActiveQuestion())
async def active_question(
    message: Message,
    questions_repo: RequestsRepo,
    user: User,
    question: Question,
) -> None:
    if message.text == "‚úÖÔ∏è –ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å":
        await active_question_end(
            message=message,
            questions_repo=questions_repo,
            user=user,
            question=question,
        )
        return

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await restart_inactivity_timer(
        question_token=question.token, bot=message.bot, questions_repo=questions_repo
    )

    # –ï—Å–ª–∏ —Ä–µ–ø–ª–∞–π - –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç–æ–º
    if message.reply_to_message:
        # –ù–∞—Ö–æ–¥–∏–º —Å–≤—è–∑—å —Å –æ—Ç–≤–µ—á–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        message_pair = await questions_repo.messages_pairs.find_by_user_message(
            user_chat_id=message.chat.id,
            user_message_id=message.reply_to_message.message_id,
        )

        if message_pair:
            # –ö–æ–ø–∏—Ä—É–µ–º —Å –æ—Ç–≤–µ—Ç–æ–º –µ—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–≤—è–∑—å
            copied_message = await message.bot.copy_message(
                from_chat_id=message.chat.id,
                message_id=message.message_id,
                chat_id=config.tg_bot.ntp_forum_id
                if "–ù–¢–ü" in user.Division
                else config.tg_bot.nck_forum_id,
                message_thread_id=question.topic_id,
                reply_to_message_id=message_pair.topic_message_id,
            )
            logger.info(
                f"[–í–æ–ø—Ä–æ—Å] - [–û—Ç–≤–µ—Ç] –ù–∞–π–¥–µ–Ω–∞ —Å–≤—è–∑—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞: {message.chat.id}:{message.reply_to_message.message_id} -> {message_pair.topic_chat_id}:{message_pair.topic_message_id}"
            )
        else:
            # –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∏, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º
            copied_message = await message.bot.copy_message(
                from_chat_id=message.chat.id,
                message_id=message.message_id,
                chat_id=config.tg_bot.ntp_forum_id
                if "–ù–¢–ü" in user.Division
                else config.tg_bot.nck_forum_id,
                message_thread_id=question.topic_id,
            )
    else:
        copied_message = await message.bot.copy_message(
            from_chat_id=message.chat.id,
            message_id=message.message_id,
            chat_id=config.tg_bot.ntp_forum_id
            if "–ù–¢–ü" in user.Division
            else config.tg_bot.nck_forum_id,
            message_thread_id=question.topic_id,
        )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–Ω–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        await store_message_connection(
            questions_repo=questions_repo,
            user_chat_id=message.chat.id,
            user_message_id=message.message_id,
            topic_chat_id=int(
                config.tg_bot.ntp_forum_id
                if "–ù–¢–ü" in user.Division
                else config.tg_bot.nck_forum_id
            ),
            topic_message_id=copied_message.message_id,
            topic_thread_id=question.topic_id,
            question_token=question.token,
            direction="user_to_topic",
        )
    except Exception as e:
        logger.error(f"Failed to store message connection: {e}")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏
    have_premium_emoji, emoji_ids = await check_premium_emoji(message)
    if have_premium_emoji and emoji_ids:
        emoji_sticker_list = await message.bot.get_custom_emoji_stickers(emoji_ids)

        sticker_info = []
        for emoji_sticker in emoji_sticker_list:
            sticker_info.append(f"{emoji_sticker.emoji}")

        stickers_text = "".join(sticker_info)

        emoji_message = await message.reply(f"""<b>üíé –ü—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏</b>

–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ–º–∏—É–º —ç–º–æ–¥–∑–∏, —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–≤–∏–¥–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∞–Ω–∞–ª–æ–≥–∏: {stickers_text}

<i>–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥</i>""")
        await run_delete_timer(
            bot=message.bot,
            chat_id=message.chat.id,
            message_ids=[emoji_message.message_id],
            seconds=30,
        )

    logger.info(
        f"[–í–æ–ø—Ä–æ—Å] - [–û–±—â–µ–Ω–∏–µ] –¢–æ–∫–µ–Ω: {question.token} | –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç: {question.employee_fullname} | –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}"
    )


@user_q_router.edited_message(ActiveQuestion())
async def handle_edited_message(
    message: Message,
    active_question_token: str,
    questions_repo: RequestsRepo,
    user: User,
    question: Question,
) -> None:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö"""
    if not question:
        logger.error(
            f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –ù–µ –Ω–∞–π–¥–µ–Ω –≤–æ–ø—Ä–æ—Å —Å —Ç–æ–∫–µ–Ω–æ–º {active_question_token}"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
    if question.status == "closed":
        logger.warning(
            f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {user.FIO} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–∫—Ä—ã—Ç–æ–º –≤–æ–ø—Ä–æ—Å–µ {question.token}"
        )
        return

    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø–∞—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pair_to_edit: MessagesPair = await questions_repo.messages_pairs.find_pair_for_edit(
        chat_id=message.chat.id, message_id=message.message_id
    )

    if not pair_to_edit:
        logger.warning(
            f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–∞—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {message.chat.id}:{message.message_id}"
        )
        return

    edit_timestamp = f"\n\n<i>–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º ‚Äî {datetime.datetime.now().strftime('%H:%M %d.%m.%Y')}</i>"

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–µ–¥–∏–∞
        if any(
            [
                message.photo,
                message.video,
                message.document,
                message.audio,
                message.animation,
            ]
        ):
            new_media = None

            if message.animation:
                new_media = InputMediaAnimation(media=message.animation.file_id)
            elif message.audio:
                new_media = InputMediaAudio(media=message.audio.file_id)
            elif message.document:
                new_media = InputMediaDocument(media=message.document.file_id)
            elif message.photo:
                new_media = InputMediaPhoto(media=message.photo[-1].file_id)
            elif message.video:
                new_media = InputMediaVideo(media=message.video.file_id)

            if not new_media:
                logger.warning(
                    "[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º caption —Å –º–µ—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if message.caption:
                new_media.caption = message.caption + edit_timestamp
                new_media.caption_entities = message.caption_entities
            else:
                new_media.caption = edit_timestamp.strip()

            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ –≤ —á–∞—Ç–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
            await message.bot.edit_message_media(
                chat_id=pair_to_edit.topic_chat_id,
                message_id=pair_to_edit.topic_message_id,
                media=new_media,
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
            await message.bot.send_message(
                chat_id=pair_to_edit.topic_chat_id,
                message_thread_id=pair_to_edit.topic_thread_id,
                text=f"""<b>‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>

–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç {user.FIO} –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª <a href='https://t.me/c/{config.tg_bot.ntp_forum_id if "–ù–¢–ü" in user.Division else config.tg_bot.nck_forum_id[4:]}/{pair_to_edit.topic_thread_id}/{pair_to_edit.topic_message_id}'>—Å–æ–æ–±—â–µ–Ω–∏–µ</a>""",
                reply_to_message_id=pair_to_edit.topic_message_id,
            )

            logger.info(
                f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –≤–æ–ø—Ä–æ—Å–µ {question.token}"
            )

        elif message.text:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            await message.bot.edit_message_text(
                chat_id=pair_to_edit.topic_chat_id,
                message_id=pair_to_edit.topic_message_id,
                text=message.text + edit_timestamp,
            )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–≥–æ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º
            await message.bot.send_message(
                chat_id=pair_to_edit.topic_chat_id,
                message_thread_id=pair_to_edit.topic_thread_id,
                text=f"""<b>‚ôªÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è</b>

–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>{user.FIO}</b> –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª <a href='https://t.me/c/{config.tg_bot.ntp_forum_id if "–ù–¢–ü" in user.Division else config.tg_bot.nck_forum_id[4:]}/{pair_to_edit.topic_thread_id}/{pair_to_edit.topic_message_id}'>—Å–æ–æ–±—â–µ–Ω–∏–µ</a>""",
                reply_to_message_id=pair_to_edit.topic_message_id,
            )

            logger.info(
                f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ –≤–æ–ø—Ä–æ—Å–µ {question.token}"
            )

        else:
            logger.warning(
                "[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∏ —Ç–µ–∫—Å—Ç–∞, –Ω–∏ –º–µ–¥–∏–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
            )

    except TelegramAPIError as e:
        logger.error(
            f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ –≤–æ–ø—Ä–æ—Å–µ {question.token}: {e}"
        )
    except Exception as e:
        logger.error(
            f"[–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞: {e}"
        )


@user_q_router.callback_query(
    QuestionQualitySpecialist.filter(F.return_question == False)
)
async def question_quality_employee(
    callback: CallbackQuery,
    callback_data: QuestionQualitySpecialist,
    questions_repo: RequestsRepo,
):
    question: Question = await questions_repo.questions.update_question_quality(
        token=callback_data.token, quality=callback_data.answer, is_duty=False
    )

    await callback.answer("–û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ ‚ù§Ô∏è")
    if callback_data.answer:
        await callback.message.edit_text(
            """–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É:
üëç –î–µ–∂—É—Ä–Ω—ã–π <b>–ø–æ–º–æ–≥ —Ä–µ—à–∏—Ç—å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å</b>""",
            reply_markup=closed_question_specialist_kb(token=callback_data.token),
        )
    else:
        await callback.message.edit_text(
            """–¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ü–µ–Ω–∫—É:
üëé –î–µ–∂—É—Ä–Ω—ã–π <b>–Ω–µ –ø–æ–º–æ–≥ —Ä–µ—à–∏—Ç—å —Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å</b>""",
            reply_markup=closed_question_specialist_kb(token=callback_data.token),
        )
    logger.info(
        f"[–í–æ–ø—Ä–æ—Å] - [–û—Ü–µ–Ω–∫–∞] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –æ—Ü–µ–Ω–∫–∞ {callback_data.answer} –≤–æ–ø—Ä–æ—Å—É {question.token} –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞"
    )
    await callback.answer()
