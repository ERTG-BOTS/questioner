import logging
from typing import Sequence

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from infrastructure.database.models import Question, User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.config import load_config
from tgbot.keyboards.group.main import reopened_question_kb
from tgbot.keyboards.user.main import (
    MainMenu,
    QuestionQualitySpecialist,
    ReturnQuestion,
    back_kb,
    finish_question_kb,
    question_confirm_kb,
    questions_list_kb,
    user_kb,
)
from tgbot.misc import dicts
from tgbot.services.logger import setup_logging

employee_return_q = Router()

config = load_config(".env")

setup_logging()
logger = logging.getLogger(__name__)


@employee_return_q.callback_query(QuestionQualitySpecialist.filter(F.return_question))
async def return_finished_q(
    callback: CallbackQuery,
    callback_data: QuestionQualitySpecialist,
    state: FSMContext,
    questions_repo: RequestsRepo,
    main_repo: RequestsRepo,
    user: User,
):
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤–æ–ø—Ä–æ—Å–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞.
    """
    await state.clear()

    active_questions: Sequence[
        Question
    ] = await questions_repo.questions.get_active_questions()
    question: Question = await questions_repo.questions.get_question(
        callback_data.token
    )
    available_to_return_questions: Sequence[
        Question
    ] = await questions_repo.questions.get_available_to_return_questions()

    if (
        question.status == "closed"
        and user.FIO not in [d.employee_fullname for d in active_questions]
        and question.token in [d.token for d in available_to_return_questions]
    ):
        duty: User = await main_repo.users.get_user(
            fullname=question.topic_duty_fullname
        )
        await questions_repo.questions.update_question_status(
            token=question.token, status="open"
        )

        await callback.bot.edit_forum_topic(
            chat_id=config.tg_bot.forum_id,
            message_thread_id=question.topic_id,
            name=user.FIO
            if config.tg_bot.division == "–ù–¶–ö"
            else f"{user.Division} | {user.FIO}",
            icon_custom_emoji_id=dicts.topicEmojis["in_progress"],
        )
        await callback.bot.reopen_forum_topic(
            chat_id=config.tg_bot.forum_id, message_thread_id=question.topic_id
        )

        await callback.message.answer(
            """<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å—Ç–∞—Ä—à–µ–º—É""",
            reply_markup=finish_question_kb(),
        )
        await callback.bot.send_message(
            chat_id=config.tg_bot.forum_id,
            message_thread_id=question.topic_id,
            text=f"""<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>{user.FIO}</b> –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è

<b>üëÆ‚Äç‚ôÇÔ∏è –°—Ç–∞—Ä—à–∏–π:</b> {duty.FIO} {'(<a href="https://t.me/' + duty.Username + '">–ª—Å</a>)' if (duty.Username != "–ù–µ —É–∫–∞–∑–∞–Ω" or duty.Username != "–°–∫—Ä—ã—Ç–æ/–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ") else ""}

<b>‚ùì –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å:</b>
<blockquote expandable><i>{question.question_text}</i></blockquote>""",
            reply_markup=reopened_question_kb(),
            disable_web_page_preview=True,
        )
        logger.info(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –í–æ–ø—Ä–æ—Å {question.token} –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º"
        )
    elif user.FIO in [d.employee_fullname for d in active_questions]:
        await callback.answer("–£ —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å", show_alert=True)
        logger.info(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å"
        )
    elif question.status != "closed":
        await callback.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–∫—Ä—ã—Ç", show_alert=True)
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, –¥–∏–∞–ª–æ–≥ {question.token} –Ω–µ –∑–∞–∫—Ä—ã—Ç"
        )
    elif question.token not in [d.token for d in available_to_return_questions]:
        await callback.answer(
            "–í–æ–ø—Ä–æ—Å –Ω–µ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å. –ü—Ä–æ—à–ª–æ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω",
            show_alert=True,
        )
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, –¥–∏–∞–ª–æ–≥ {question.token} –±—ã–ª –∑–∞–∫—Ä—ã—Ç –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        )


@employee_return_q.callback_query(MainMenu.filter(F.menu == "return"))
async def q_list(
    callback: CallbackQuery, state: FSMContext, user: User, questions_repo: RequestsRepo
):
    """
    –ú–µ–Ω—é "üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–ø—Ä–æ—Å–∞". –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.
    """
    questions: Sequence[
        Question
    ] = await questions_repo.questions.get_last_questions_by_chat_id(
        employee_chat_id=callback.from_user.id, limit=5
    )

    state_data = await state.get_data()
    if not questions:
        await callback.message.edit_text(
            """<b>üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–ø—Ä–æ—Å–∞</b>

üìù –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞""",
            reply_markup=back_kb(),
        )
        logging.warning(
            f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or user.Role == 10 else '[–Æ–∑–µ—Ä]'} {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–∞—Ç–∞, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç"
        )
        return

    await callback.message.edit_text(
        """<b>üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–ø—Ä–æ—Å–∞</b>

üìã –í—ã–±–µ—Ä–∏ –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö

<i>–û—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–∫—Ä—ã—Ç—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞</i>""",
        reply_markup=questions_list_kb(questions),
    )
    logging.info(
        f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or user.Role == 10 else '[–Æ–∑–µ—Ä]'} {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–∞—Ç–∞"
    )


@employee_return_q.callback_query(ReturnQuestion.filter(F.action == "show"))
async def q_info(
    callback: CallbackQuery,
    callback_data: ReturnQuestion,
    state: FSMContext,
    user: User,
    questions_repo: RequestsRepo,
    main_repo: RequestsRepo,
):
    """–ú–µ–Ω—é –æ–ø–∏—Å–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É"""
    question: Question = await questions_repo.questions.get_question(
        token=callback_data.token
    )

    if not question:
        await callback.message.edit_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=user_kb())
        return

    duty: User = await main_repo.users.get_user(fullname=question.topic_duty_fullname)

    state_data = await state.get_data()
    start_date_str = question.start_time.strftime("%d.%m.%Y %H:%M")
    end_date_str = (
        question.end_time.strftime("%d.%m.%Y %H:%M")
        if question.end_time
        else "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    )
    question_text = (
        question.question_text[:200] + "..."
        if len(question.question_text) > 200
        else question.question_text
    )

    await callback.message.edit_text(
        f"""<b>üîÑ –í–æ–∑–≤—Ä–∞—Ç –≤–æ–ø—Ä–æ—Å–∞</b>

‚ùì <b>–í–æ–ø—Ä–æ—Å:</b>
<blockquote expandable>{question_text}</blockquote>

üóÉÔ∏è <b>–†–µ–≥–ª–∞–º–µ–Ω—Ç:</b> <a href='{question.clever_link}'>—Ç—ã–∫</a>

<b>üëÆ‚Äç‚ôÇÔ∏è –°—Ç–∞—Ä—à–∏–π:</b> {duty.FIO} {'(<a href="https://t.me/' + duty.Username + '">–ª—Å</a>)' if (duty.Username != "–ù–µ —É–∫–∞–∑–∞–Ω" or duty.Username != "–°–∫—Ä—ã—Ç–æ/–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ") else ""}
üöÄ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {start_date_str}
üîí <b>–î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:</b> {end_date_str}

–•–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?""",
        reply_markup=question_confirm_kb(question.token),
        disable_web_page_preview=True,
    )
    logging.warning(
        f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or user.Role == 10 else '[–Æ–∑–µ—Ä]'} {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ {question.token} –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"
    )
    await callback.answer()


@employee_return_q.callback_query(ReturnQuestion.filter(F.action == "confirm"))
async def return_q_confirm(
    callback: CallbackQuery,
    callback_data: ReturnQuestion,
    state: FSMContext,
    user: User,
    questions_repo: RequestsRepo,
    main_repo: RequestsRepo,
):
    """–í–æ–∑–≤—Ä–∞—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ä–∞–±–æ—Ç—É"""
    await state.clear()

    question: Question = await questions_repo.questions.get_question(
        token=callback_data.token
    )

    if not question:
        await callback.message.edit_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=user_kb())
        return

    active_questions = await questions_repo.questions.get_active_questions()

    if (
        question.status == "closed"
        and user.FIO not in [d.employee_fullname for d in active_questions]
        and question.allow_return
    ):
        duty: User = await main_repo.users.get_user(
            fullname=question.topic_duty_fullname
        )
        # 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–∞ –Ω–∞ "open"
        await questions_repo.questions.update_question_status(
            token=question.token, status="open"
        )

        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∏–∫–æ–Ω–∫—É —Ç–µ–º—ã
        await callback.bot.edit_forum_topic(
            chat_id=config.tg_bot.forum_id,
            message_thread_id=question.topic_id,
            name=user.FIO
            if config.tg_bot.division == "–ù–¶–ö"
            else f"{user.Division} | {user.FIO}",
            icon_custom_emoji_id=dicts.topicEmojis["in_progress"],
        )

        # 3. –ü–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ–º—É
        await callback.bot.reopen_forum_topic(
            chat_id=config.tg_bot.forum_id, message_thread_id=question.topic_id
        )

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
        await callback.message.answer(
            """<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–∏ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã —Å—Ç–∞—Ä—à–µ–º—É""",
            reply_markup=finish_question_kb(),
        )

        # 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–µ–∂—É—Ä–Ω–æ–º—É –≤ —Ç–µ–º—É
        await callback.bot.send_message(
            chat_id=config.tg_bot.forum_id,
            message_thread_id=question.topic_id,
            text=f"""<b>üîì –í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç</b>

–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <b>{user.FIO}</b> –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–ª –≤–æ–ø—Ä–æ—Å –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤

<b>üëÆ‚Äç‚ôÇÔ∏è –°—Ç–∞—Ä—à–∏–π:</b> {duty.FIO} {'(<a href="https://t.me/' + duty.Username + '">–ª—Å</a>)' if (duty.Username != "–ù–µ —É–∫–∞–∑–∞–Ω" or duty.Username != "–°–∫—Ä—ã—Ç–æ/–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ") else ""}

<b>‚ùì –ò–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å:</b>
<blockquote expandable><i>{question.question_text}</i></blockquote>""",
            reply_markup=reopened_question_kb(),
            disable_web_page_preview=True,
        )
    elif user.FIO in [d.employee_fullname for d in active_questions]:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        await callback.answer("–£ —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å", show_alert=True)
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, —É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ {question.employee_fullname} –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å"
        )
    elif question.status != "closed":
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–∫—Ä—ã—Ç–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
        await callback.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –Ω–µ –∑–∞–∫—Ä—ã—Ç", show_alert=True)
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, –≤–æ–ø—Ä–æ—Å {question.token} –Ω–µ –∑–∞–∫—Ä—ã—Ç"
        )
    elif not question.allow_return:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
        await callback.answer("–í–æ–∑–≤—Ä–∞—Ç –≤–æ–ø—Ä–æ—Å–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=True)
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è, –≤–æ–ø—Ä–æ—Å {question.token} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞"
        )
    else:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å", show_alert=True)
        logger.error(
            f"[–í–æ–ø—Ä–æ—Å] - [–ü–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏–µ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.username} ({callback.from_user.id}): –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è –≤–æ–ø—Ä–æ—Å–∞ {question.token}"
        )
    await callback.answer()
