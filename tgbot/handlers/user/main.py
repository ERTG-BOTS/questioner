import datetime
import logging

import pytz
from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from infrastructure.database.models import Question, User
from infrastructure.database.repo.requests import RequestsRepo
from tgbot.keyboards.user.main import (
    AskQuestionMenu,
    CancelQuestion,
    MainMenu,
    activity_status_toggle_kb,
    back_kb,
    cancel_question_kb,
    question_ask_kb,
    user_kb,
)
from tgbot.misc.helpers import disable_previous_buttons, extract_clever_link, short_name
from tgbot.misc.states import AskQuestion
from tgbot.services.g_sheets import get_target_forum
from tgbot.services.logger import setup_logging
from tgbot.services.scheduler import (
    remove_question_timer,
    start_attention_reminder,
    start_inactivity_timer,
)

user_router = Router()
user_router.message.filter(F.chat.type == "private")
user_router.callback_query.filter(F.message.chat.type == "private")


setup_logging()
logger = logging.getLogger(__name__)


@user_router.message(CommandStart())
async def main_cmd(
    message: Message, state: FSMContext, user: User, questions_repo: RequestsRepo
):
    employee_topics_today = await questions_repo.questions.get_questions_count_today(
        employee_fullname=user.FIO
    )
    employee_topics_month = (
        await questions_repo.questions.get_questions_count_last_month(
            employee_fullname=user.FIO
        )
    )

    state_data = await state.get_data()
    await state.clear()

    if user:
        await message.answer(
            f"""üëã –ü—Ä–∏–≤–µ—Ç, <b>{short_name(user.FIO)}</b>!

–Ø - –±–æ—Ç-–≤–æ–ø—Ä–æ—Å–Ω–∏–∫

<b>‚ùì –¢—ã –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
- –ó–∞ –¥–µ–Ω—å {employee_topics_today}
- –ó–∞ –º–µ—Å—è—Ü {employee_topics_month}

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</i>""",
            reply_markup=user_kb(
                is_role_changed=True
                if state_data.get("role") or user.Role == 10
                else False
            ),
        )
        logging.info(
            f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or user.Role == 10 else '[–Æ–∑–µ—Ä]'} {message.from_user.username} ({message.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ —é–∑–µ—Ä-–º–µ–Ω—é"
        )
    else:
        await message.answer(f"""–ü—Ä–∏–≤–µ—Ç, <b>@{message.from_user.username}</b>!
        
–ù–µ –Ω–∞—à–µ–ª —Ç–µ–±—è –≤ —Å–ø–∏—Å–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –ì—Ä–∞—Ñ–∏–∫–æ–≤
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –æ–±—Ä–∞—Ç–∏—Å—å –∫ –ú–∏–ü

–ï—Å–ª–∏ —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ, –Ω–∞–ø–∏—à–∏ <b>/start</b>""")


@user_router.callback_query(MainMenu.filter(F.menu == "main"))
async def main_cb(
    callback: CallbackQuery,
    state: FSMContext,
    user: User,
    questions_repo: RequestsRepo,
):
    employee_topics_today = await questions_repo.questions.get_questions_count_today(
        employee_fullname=user.FIO
    )
    employee_topics_month = (
        await questions_repo.questions.get_questions_count_last_month(
            employee_fullname=user.FIO
        )
    )

    state_data = await state.get_data()

    await callback.message.edit_text(
        f"""–ü—Ä–∏–≤–µ—Ç, <b>{short_name(user.FIO)}</b>!

–Ø - –±–æ—Ç-–≤–æ–ø—Ä–æ—Å–Ω–∏–∫

<b>‚ùì –¢—ã –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
- –ó–∞ –¥–µ–Ω—å {employee_topics_today}
- –ó–∞ –º–µ—Å—è—Ü {employee_topics_month}

–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ""",
        reply_markup=user_kb(
            is_role_changed=True if state_data.get("role") or user.Role == 10 else False
        ),
    )
    logging.info(
        f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or user.Role == 10 else '[–Æ–∑–µ—Ä]'} {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ —é–∑–µ—Ä-–º–µ–Ω—é"
    )
    await callback.answer()


@user_router.callback_query(MainMenu.filter(F.menu == "ask"))
async def ask_question(
    callback: CallbackQuery, state: FSMContext, user: User, questions_repo: RequestsRepo
):
    active_questions = await questions_repo.questions.get_active_questions()
    if user.FIO in [d.employee_fullname for d in active_questions]:
        await callback.answer("–£ —Ç–µ–±—è –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å", show_alert=True)
        return

    state_data = await state.get_data()

    msg = await callback.message.edit_text(
        """<b>ü§î –°—É—Ç—å –≤–æ–ø—Ä–æ—Å–∞</b>

–û—Ç–ø—Ä–∞–≤—å –≤–æ–ø—Ä–æ—Å –∏ –≤–ª–æ–∂–µ–Ω–∏—è –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º""",
        reply_markup=back_kb(),
    )

    await state.update_data(messages_with_buttons=[msg.message_id])
    await state.set_state(AskQuestion.question)
    logging.info(
        f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or user.Role == 10 else '[–Æ–∑–µ—Ä]'} [{user.Division}] {callback.from_user.username} ({callback.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"
    )
    await callback.answer()


@user_router.message(AskQuestion.question)
async def question_text(
    message: Message,
    state: FSMContext,
    user: User,
    questions_repo: RequestsRepo,
    main_repo: RequestsRepo,
):
    active_questions = await questions_repo.questions.get_active_questions()
    if user.FIO in [q.employee_fullname for q in active_questions]:
        await state.clear()
        await message.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
        return

    question_text = message.caption if message.caption else message.text

    if not question_text or question_text.strip() == "":
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.")
        return

    await state.update_data(question=question_text)
    
    has_clever_link = False
    if question_text and "https://clever.ertelecom.ru/content/space/" in question_text:
        extracted_link = extract_clever_link(question_text)
        if extracted_link:
            forbidden_links = [
                "https://clever.ertelecom.ru/content/space/4/wiki/1808/page/0",
                "https://clever.ertelecom.ru/content/space/4/wiki/10259/page/0", 
                "https://clever.ertelecom.ru/content/space/4",
                "https://clever.ertelecom.ru/content/space/4/"
            ]
            has_clever_link = extracted_link not in forbidden_links
    await state.update_data(question_message_id=message.message_id)

    state_data = await state.get_data()
    temp_division = state_data.get("temp_division")
    if state_data.get("processing"):
        return

    await state.update_data(processing=True)

    target_forum_id = await get_target_forum(
        username=user.Username, division=user.Division, temp_division=temp_division
    )
    group_settings = await questions_repo.settings.get_settings_by_group_id(
        group_id=target_forum_id
    )

    ask_clever_link: bool = group_settings.get_setting("ask_clever_link")

    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç —É–∂–µ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å root, –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏
    if has_clever_link or user.Role == 10 or not ask_clever_link:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –∏–Ω–∞—á–µ None
        clever_link = (
            extract_clever_link(message.text or message.caption)
            if has_clever_link
            else None
        )

        message_content = message.text or message.caption
        if message_content == clever_link:
            await state.update_data(processing=False)
            return

        employee_topics_today = (
            await questions_repo.questions.get_questions_count_today(
                employee_fullname=user.FIO
            )
        )
        employee_topics_month = (
            await questions_repo.questions.get_questions_count_last_month(
                employee_fullname=user.FIO
            )
        )

        new_topic = await message.bot.create_forum_topic(
            chat_id=target_forum_id,
            name=f"{user.Division} | {short_name(user.FIO)}"
            if group_settings.get_setting("show_division")
            else short_name(user.FIO),
            icon_custom_emoji_id=group_settings.get_setting("emoji_open"),
        )  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã

        new_question = await questions_repo.questions.add_question(
            group_id=target_forum_id,
            topic_id=new_topic.message_thread_id,
            employee_chat_id=message.chat.id,
            employee_fullname=user.FIO,
            employee_division=user.Division,
            start_time=datetime.datetime.now(tz=pytz.timezone("Asia/Yekaterinburg")),
            question_text=state_data.get("question"),
            clever_link=clever_link,  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç
            activity_status_enabled=group_settings.get_setting("activity_status"),
        )  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –ë–î

        await message.answer(
            """<b>‚úÖ –£—Å–ø–µ—à–Ω–æ</b>

–í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç""",
            reply_markup=cancel_question_kb(token=new_question.token),
        )

        if user.Username:
            user_fullname = f"<a href='t.me/{user.Username}'>{short_name(user.FIO)}</a>"
        else:
            user_fullname = short_name(user.FIO)

        head = await main_repo.users.get_user(fullname=user.Boss)
        if head.Username:
            head_fullname = f"<a href='t.me/{head.Username}'>{short_name(head.FIO)}</a>"
        else:
            head_fullname = short_name(head.FIO)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç
        if clever_link:
            topic_text = f"""–í–æ–ø—Ä–æ—Å –∑–∞–¥–∞–µ—Ç <b>{user_fullname}</b>

<blockquote expandable><b>üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.Position}
<b>üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {head_fullname}

<b>‚ùì –í–æ–ø—Ä–æ—Å–æ–≤:</b> –∑–∞ –¥–µ–Ω—å {employee_topics_today} / –∑–∞ –º–µ—Å—è—Ü {employee_topics_month}</blockquote>"""
        else:
            topic_text = f"""–í–æ–ø—Ä–æ—Å –∑–∞–¥–∞–µ—Ç <b>{user_fullname}</b>

<blockquote expandable><b>üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.Position}
<b>üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {head_fullname}

<b>‚ùì –í–æ–ø—Ä–æ—Å–æ–≤:</b> –∑–∞ –¥–µ–Ω—å {employee_topics_today} / –∑–∞ –º–µ—Å—è—Ü {employee_topics_month}</blockquote>"""

        topic_info_msg = await message.bot.send_message(
            chat_id=new_question.group_id,
            message_thread_id=new_topic.message_thread_id,
            text=topic_text,
            disable_web_page_preview=True,
            reply_markup=activity_status_toggle_kb(
                token=new_question.token,
                clever_link=clever_link if clever_link else None,
                current_status=new_question.activity_status_enabled,
                global_status=group_settings.get_setting("activity_status"),
            ),
        )

        await message.bot.copy_message(
            chat_id=new_question.group_id,
            message_thread_id=new_topic.message_thread_id,
            from_chat_id=message.chat.id,
            message_id=state_data.get("question_message_id"),
        )  # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ —Ç–µ–º—É

        await message.bot.pin_chat_message(
            chat_id=new_question.group_id,
            message_id=topic_info_msg.message_id,
            disable_notification=True,
        )  # –ü–∏–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ

        await start_attention_reminder(new_question.token, questions_repo)
        await state.clear()
        logging.info(
            f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or user.Role == 10 else '[–Æ–∑–µ—Ä]'} {message.from_user.username} ({message.from_user.id}): –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å {new_question.token}"
        )
        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–∞—Ö
        await disable_previous_buttons(message, state)
        return

    # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–∞—Ö
    await disable_previous_buttons(message, state)

    # TODO –í–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–æ–ø —é–∑–µ—Ä–æ–≤ –ø–æ—Å–ª–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    # top_users: Sequence[
    #     User
    # ] = await questions_repo.questions.get_top_users_by_division(
    #     division="–ù–¶–ö" if "–ù–¶–ö" in user.Division else "–ù–¢–ü", main_repo=main_repo
    # )

    # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç
    response_msg = await message.answer(
        """<b>üóÉÔ∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç</b>

–ü—Ä–∏–∫—Ä–µ–ø–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –∏–∑ –∫–ª–µ–≤–µ—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å""",
        reply_markup=question_ask_kb(is_user_in_top=True),
        # reply_markup=question_ask_kb(
        #     is_user_in_top=True
        #     if user.ChatId in (u.ChatId for u in top_users)
        #     else False
        # ),
    )

    messages_with_buttons = state_data.get("messages_with_buttons", [])
    messages_with_buttons.append(response_msg.message_id)
    await state.update_data(messages_with_buttons=messages_with_buttons)

    await state.set_state(AskQuestion.clever_link)
    logging.info(
        f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or user.Role == 10 else '[–Æ–∑–µ—Ä]'} {message.from_user.username} ({message.from_user.id}): –û—Ç–∫—Ä—ã—Ç–æ –º–µ–Ω—é —É—Ç–æ—á–Ω–µ–Ω–∏—è —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞"
    )


@user_router.message(AskQuestion.clever_link)
async def clever_link_handler(
    message: Message,
    state: FSMContext,
    user: User,
    questions_repo: RequestsRepo,
    main_repo: RequestsRepo,
):
    active_questions = await questions_repo.questions.get_active_questions()
    if user.FIO in [q.employee_fullname for q in active_questions]:
        await state.clear()
        await message.answer("–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
        return

    state_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ö–ª–µ–≤–µ—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –†—É—Ç–æ–º
    if (
        "https://clever.ertelecom.ru/content/space/" not in message.text
        and user.Role != 10
    ):
        await message.answer(
            """<b>üóÉÔ∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç</b>

–°–æ–æ–±—â–µ–Ω–∏–µ <b>–Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–ª–µ–≤–µ—Ä</b> ü•∫

–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –∏–∑ –∫–ª–µ–≤–µ—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å""",
            reply_markup=back_kb(),
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    extracted_link = extract_clever_link(message.text)
    if extracted_link and user.Role != 10:
        forbidden_links = [
            "https://clever.ertelecom.ru/content/space/4/wiki/1808/page/0",
            "https://clever.ertelecom.ru/content/space/4/wiki/10259/page/0", 
            "https://clever.ertelecom.ru/content/space/4",
            "https://clever.ertelecom.ru/content/space/4/"
        ]
        if extracted_link in forbidden_links:
            await message.answer(
                """<b>üóÉÔ∏è –†–µ–≥–ª–∞–º–µ–Ω—Ç</b>

–°–æ–æ–±—â–µ–Ω–∏–µ <b>—Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É</b> ü•∫

–û—Ç–ø—Ä–∞–≤—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç –∏–∑ –∫–ª–µ–≤–µ—Ä–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —É —Ç–µ–±—è –≤–æ–ø—Ä–æ—Å""",
                reply_markup=back_kb(),
            )
            return

    clever_link = extracted_link
    await state.clear()
    employee_topics_today = await questions_repo.questions.get_questions_count_today(
        employee_fullname=user.FIO
    )
    employee_topics_month = (
        await questions_repo.questions.get_questions_count_last_month(
            employee_fullname=user.FIO
        )
    )

    target_forum_id = await get_target_forum(
        username=user.Username, division=user.Division
    )
    group_settings = await questions_repo.settings.get_settings_by_group_id(
        group_id=target_forum_id
    )

    # –í—ã–∫–ª—é—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
    await disable_previous_buttons(message, state)

    new_topic = await message.bot.create_forum_topic(
        chat_id=target_forum_id,
        name=f"{user.Division} | {short_name(user.FIO)}"
        if group_settings.get_setting("show_division")
        else short_name(user.FIO),
        icon_custom_emoji_id=group_settings.get_setting("emoji_open"),
    )  # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã

    new_question = await questions_repo.questions.add_question(
        group_id=target_forum_id,
        topic_id=new_topic.message_thread_id,
        employee_chat_id=message.chat.id,
        employee_fullname=user.FIO,
        employee_division=user.Division,
        start_time=datetime.datetime.now(tz=pytz.timezone("Asia/Yekaterinburg")),
        question_text=state_data.get("question"),
        clever_link=clever_link if clever_link else None,
        activity_status_enabled=group_settings.get_setting("activity_status"),
    )  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –ë–î

    await message.answer(
        """<b>‚úÖ –£—Å–ø–µ—à–Ω–æ</b>

–í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç""",
        reply_markup=cancel_question_kb(token=new_question.token),
    )

    if user.Username:
        user_fullname = f"<a href='t.me/{user.Username}'>{short_name(user.FIO)}</a>"
    else:
        user_fullname = short_name(user.FIO)

    head = await main_repo.users.get_user(fullname=user.Boss)
    if head.Username:
        head_fullname = f"<a href='t.me/{head.Username}'>{short_name(head.FIO)}</a>"
    else:
        head_fullname = short_name(head.FIO)

    topic_info_msg = await message.bot.send_message(
        chat_id=target_forum_id,
        message_thread_id=new_topic.message_thread_id,
        text=f"""–í–æ–ø—Ä–æ—Å –∑–∞–¥–∞–µ—Ç <b>{user_fullname}</b>

<blockquote expandable><b>üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.Position}
<b>üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {head_fullname}

<b>‚ùì –í–æ–ø—Ä–æ—Å–æ–≤:</b> –∑–∞ –¥–µ–Ω—å {employee_topics_today} / –∑–∞ –º–µ—Å—è—Ü {employee_topics_month}</blockquote>""",
        disable_web_page_preview=True,
        reply_markup=activity_status_toggle_kb(
            token=new_question.token,
            clever_link=clever_link if clever_link else None,
            current_status=new_question.activity_status_enabled,
            global_status=group_settings.get_setting("activity_status"),
        ),
    )

    await message.bot.copy_message(
        chat_id=new_question.group_id,
        message_thread_id=new_topic.message_thread_id,
        from_chat_id=message.chat.id,
        message_id=state_data.get("question_message_id"),
    )  # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –≤ —Ç–µ–º—É

    await message.bot.pin_chat_message(
        chat_id=new_question.group_id,
        message_id=topic_info_msg.message_id,
        disable_notification=True,
    )  # –ü–∏–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ

    await start_attention_reminder(new_question.token, questions_repo)
    logging.info(
        f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or user.Role == 10 else '[–Æ–∑–µ—Ä]'} {message.from_user.username} ({message.from_user.id}): –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å {new_question.token}"
    )


@user_router.callback_query(AskQuestionMenu.filter(not F.found_regulation))
async def regulation_not_found_handler(
    callback: CallbackQuery,
    state: FSMContext,
    user: User,
    questions_repo: RequestsRepo,
    main_repo: RequestsRepo,
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ –Ω–∞—à–µ–ª" –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç
    """
    state_data = await state.get_data()
    await state.clear()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    employee_topics_today = await questions_repo.questions.get_questions_count_today(
        employee_fullname=user.FIO
    )
    employee_topics_month = (
        await questions_repo.questions.get_questions_count_last_month(
            employee_fullname=user.FIO
        )
    )

    target_forum_id = await get_target_forum(
        username=user.Username, division=user.Division
    )
    group_settings = await questions_repo.settings.get_settings_by_group_id(
        group_id=target_forum_id
    )

    # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–∞—Ö
    await disable_previous_buttons(callback.message, state)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
    new_topic = await callback.bot.create_forum_topic(
        chat_id=target_forum_id,
        name=f"{user.Division} | {short_name(user.FIO)}"
        if group_settings.get_setting("show_division")
        else short_name(user.FIO),
        icon_custom_emoji_id=group_settings.get_setting("emoji_open"),
    )

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å clever_link = "–Ω–µ –Ω–∞—à–µ–ª"
    new_question = await questions_repo.questions.add_question(
        group_id=target_forum_id,
        topic_id=new_topic.message_thread_id,
        employee_chat_id=callback.from_user.id,
        employee_fullname=user.FIO,
        employee_division=user.Division,
        start_time=datetime.datetime.now(tz=pytz.timezone("Asia/Yekaterinburg")),
        question_text=state_data.get("question"),
        clever_link="–Ω–µ –Ω–∞—à–µ–ª",  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ,
        activity_status_enabled=group_settings.get_setting("activity_status"),
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
    await callback.message.edit_text(
        """<b>‚úÖ –£—Å–ø–µ—à–Ω–æ</b>

–í–æ–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç""",
        reply_markup=cancel_question_kb(token=new_question.token),
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if new_question.status == "open" and new_question.activity_status_enabled:
        await start_inactivity_timer(new_question.token, questions_repo)

    if user.Username:
        user_fullname = f"<a href='t.me/{user.Username}'>{short_name(user.FIO)}</a>"
    else:
        user_fullname = short_name(user.FIO)

    head = await main_repo.users.get_user(fullname=user.Boss)
    if head.Username:
        head_fullname = f"<a href='t.me/{head.Username}'>{short_name(head.FIO)}</a>"
    else:
        head_fullname = short_name(head.FIO)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º "–Ω–µ –Ω–∞—à–µ–ª" –≤ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–µ
    topic_text = f"""–í–æ–ø—Ä–æ—Å –∑–∞–¥–∞–µ—Ç <b>{user_fullname}</b>

–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–≥–ª–∞–º–µ–Ω—Ç

<blockquote expandable><b>üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user.Position}
<b>üëë –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å:</b> {head_fullname}

<b>‚ùì –í–æ–ø—Ä–æ—Å–æ–≤:</b> –∑–∞ –¥–µ–Ω—å {employee_topics_today} / –∑–∞ –º–µ—Å—è—Ü {employee_topics_month}</blockquote>"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ç–µ–º—É
    topic_info_msg = await callback.bot.send_message(
        chat_id=new_question.group_id,
        message_thread_id=new_topic.message_thread_id,
        text=topic_text,
        disable_web_page_preview=True,
        reply_markup=activity_status_toggle_kb(
            token=new_question.token,
            current_status=new_question.activity_status_enabled,
            global_status=group_settings.get_setting("activity_status"),
        ),
    )

    # –ö–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    await callback.bot.copy_message(
        chat_id=new_question.group_id,
        message_thread_id=new_topic.message_thread_id,
        from_chat_id=callback.message.chat.id,
        message_id=state_data.get("question_message_id"),
    )

    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.bot.pin_chat_message(
        chat_id=new_question.group_id,
        message_id=topic_info_msg.message_id,
        disable_notification=True,
    )

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback.answer()

    await start_attention_reminder(new_question.token, questions_repo)

    logging.info(
        f"{'[–ê–¥–º–∏–Ω]' if state_data.get('role') or user.Role == 10 else '[–Æ–∑–µ—Ä]'} {callback.from_user.username} ({callback.from_user.id}): –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å {new_question.token} –±–µ–∑ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞ (–Ω–µ –Ω–∞—à–µ–ª)"
    )


@user_router.callback_query(CancelQuestion.filter(F.action == "cancel"))
async def cancel_question(
    callback: CallbackQuery,
    callback_data: CancelQuestion,
    state: FSMContext,
    questions_repo: RequestsRepo,
    user: User,
):
    question: Question = await questions_repo.questions.get_question(
        token=callback_data.token
    )

    if (
        question
        and question.status == "open"
        and not question.topic_duty_fullname
        and not question.end_time
    ):
        group_settings = await questions_repo.settings.get_settings_by_group_id(
            group_id=question.group_id
        )

        await callback.bot.edit_forum_topic(
            chat_id=question.group_id,
            message_thread_id=question.topic_id,
            icon_custom_emoji_id=group_settings.get_setting("emoji_fired"),
        )
        await callback.bot.close_forum_topic(
            chat_id=question.group_id,
            message_thread_id=question.topic_id,
        )
        await questions_repo.questions.delete_question(token=question.token)
        await remove_question_timer(question=question)
        await callback.bot.send_message(
            chat_id=question.group_id,
            message_thread_id=question.topic_id,
            text="""<b>üî• –û—Ç–º–µ–Ω–∞ –≤–æ–ø—Ä–æ—Å–∞</b>
        
–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ—Ç–º–µ–Ω–∏–ª –≤–æ–ø—Ä–æ—Å

<i>–í–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥</i>""",
        )
        await callback.answer("–í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        await main_cb(
            callback=callback, state=state, user=user, questions_repo=questions_repo
        )
    elif not question:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–º–µ–Ω—è–µ–º—ã–π –≤–æ–ø—Ä–æ—Å")
        await main_cb(
            callback=callback, state=state, user=user, questions_repo=questions_repo
        )
    else:
        await callback.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω. –û–Ω —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ")
    await callback.answer()


@user_router.message()
async def default_message_handler(
    message: Message, state: FSMContext, user: User, questions_repo: RequestsRepo
):
    """
    Default handler for all unhandled user messages.
    Sends start message if user is not in question state and doesn't have active questions.
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º FSM
    current_state = await state.get_state()

    logger.info(current_state)
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if current_state is not None:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    try:
        active_questions = await questions_repo.questions.get_active_questions()
        logger.info(active_questions)
        if user.FIO in [q.employee_fullname for q in active_questions]:
            return
    except Exception as e:
        logger.error(f"Error checking active questions for user {user.FIO}: {e}")
        return

    # –ï—Å–ª–∏ –º—ã –æ–∫–∞–∑–∞–ª–∏—Å—å –∑–¥–µ—Å—å - —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ FSM
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    employee_topics_today = await questions_repo.questions.get_questions_count_today(
        employee_fullname=user.FIO
    )
    employee_topics_month = (
        await questions_repo.questions.get_questions_count_last_month(
            employee_fullname=user.FIO
        )
    )

    await message.answer(
        f"""üëã –ü—Ä–∏–≤–µ—Ç, <b>{short_name(user.FIO)}</b>!

–Ø - –±–æ—Ç-–≤–æ–ø—Ä–æ—Å–Ω–∏–∫

<b>‚ùì –¢—ã –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å–æ–≤:</b>
- –ó–∞ –¥–µ–Ω—å {employee_topics_today}
- –ó–∞ –º–µ—Å—è—Ü {employee_topics_month}

<i>–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º</i>""",
        reply_markup=user_kb(is_role_changed=user.Role == 10),
    )

    logging.info(
        f"[–î–µ—Ñ–æ–ª—Ç] {message.from_user.username} ({message.from_user.id}): –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
