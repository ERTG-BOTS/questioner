from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


class QuestionQualityDuty(CallbackData, prefix="q_quality_duty"):
    answer: bool = False
    token: str = None
    return_question: bool = False


class QuestionAllowReturn(CallbackData, prefix="q_allow_return"):
    allow_return: bool = False
    token: str = None


class FinishedQuestion(CallbackData, prefix="finished_q"):
    action: str


def reopened_question_kb() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ–º –≤–æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã—Ç–∏—è

    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üïäÔ∏è –û—Å–≤–æ–±–æ–¥–∏—Ç—å –≤–æ–ø—Ä–æ—Å",
                callback_data=FinishedQuestion(action="release").pack(),
            ),
        ],
    ]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    return keyboard


def question_quality_duty_kb(
    token: str,
    allow_return: bool = True,
    show_quality: bool = None,
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ü–µ–Ω–∫–∏ –ø–æ–º–æ—â–∏ —Å –≤–æ–ø—Ä–æ—Å–æ–º —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –¥–µ–∂—É—Ä–Ω–æ–≥–æ.

    :param str token: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–æ–ø—Ä–æ—Å–∞
    :param bool allow_return: –†–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –≤–æ–∑–≤—Ä–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    :param bool show_quality: –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ –≤–æ–ø—Ä–æ—Å–∞
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    """
    buttons = []

    if show_quality is not None:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üëé –î–∞",
                    callback_data=QuestionQualityDuty(answer=False, token=token).pack(),
                ),
                InlineKeyboardButton(
                    text="üëç –ù–µ—Ç",
                    callback_data=QuestionQualityDuty(answer=True, token=token).pack(),
                ),
            ],
        )

    buttons.append(
        [
            InlineKeyboardButton(
                text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤–æ–ø—Ä–æ—Å",
                callback_data=QuestionQualityDuty(
                    return_question=True, token=token
                ).pack(),
            )
        ],
    )

    if allow_return:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üü¢ –í–æ–∑–≤—Ä–∞—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω",
                    callback_data=QuestionAllowReturn(
                        token=token, allow_return=False
                    ).pack(),
                )
            ]
        )
    else:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üü† –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω",
                    callback_data=QuestionAllowReturn(
                        token=token, allow_return=True
                    ).pack(),
                )
            ]
        )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


def closed_question_duty_kb(
    token: str, allow_return: bool = True
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ.

    :param token: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤–æ–ø—Ä–æ—Å–∞
    :type token: str
    :param allow_return: –†–∞–∑—Ä–µ—à–µ–Ω –ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –≤–æ–∑–≤—Ä–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    :type allow_return: bool
    :return: –û–±—ä–µ–∫—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    :rtype: InlineKeyboardMarkup
    """
    buttons = [
        [
            InlineKeyboardButton(
                text="üîÑ –í–µ—Ä–Ω—É—Ç—å –≤–æ–ø—Ä–æ—Å",
                callback_data=QuestionQualityDuty(
                    return_question=True, token=token
                ).pack(),
            )
        ]
    ]

    if allow_return:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üü¢ –í–æ–∑–≤—Ä–∞—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω",
                    callback_data=QuestionAllowReturn(
                        token=token, allow_return=False
                    ).pack(),
                )
            ]
        )
    else:
        buttons.append(
            [
                InlineKeyboardButton(
                    text="üü† –í–æ–∑–≤—Ä–∞—Ç –æ—Ç–∫–ª—é—á–µ–Ω",
                    callback_data=QuestionAllowReturn(
                        token=token, allow_return=True
                    ).pack(),
                )
            ]
        )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard
